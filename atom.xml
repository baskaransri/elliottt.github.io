<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stuff and Things]]></title>
  <link href="http://elliottt.github.io/atom.xml" rel="self"/>
  <link href="http://elliottt.github.io/"/>
  <updated>2016-08-27T12:24:54-07:00</updated>
  <id>http://elliottt.github.io/</id>
  <author>
    <name><![CDATA[Trevor Elliott]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim's `findfile` function]]></title>
    <link href="http://elliottt.github.io/blog/2016/08/27/vim-find-file/"/>
    <updated>2016-08-27T12:07:30-07:00</updated>
    <id>http://elliottt.github.io/blog/2016/08/27/vim-find-file</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently updated the tests for <code>stack.yaml</code> and <code>cabal.project</code> files in my
<a href="https://github.com/elliottt/vim-haskell">vim haskell plugin</a>. The
<code>haskell#StackYamlFileExists</code> and <code>haskell#CabalProjectFileExists</code> functions now
take advantage of vim&rsquo;s <code>findfile</code> function for searching up the directory tree,
rather than just require that either file exist in the current working
directory. This change makes a bit more sense given the way that both <code>stack</code>
and <code>cabal new-build</code> work, allowing the commands to be invoked from anywhere
underneath the directory that contains <code>stack.yaml</code> or <code>cabal.project</code>.</p>

<p>The <code>findfile</code> function is quite handy for this situation, as it&rsquo;s able to
search up as well as down the directory tree. Simply specifying the directory to
search from as <code>'.;'</code> instructs it to search up the tree, and passing the
<code>{list}</code> argument as <code>-1</code> returns a list of the matches instead of the path of
the first match.</p>

<p>I&rsquo;ve now updated my
<a href="https://github.com/elliottt/vim-config/blob/master/after/syntax/haskell.vim">personal haskell config</a>
to choose which tool to use, based on the three predicates that the plugin
provides:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Configure :make</span>
</span><span class='line'><span class="k">if</span> haskell#CabalProjectFileExists<span class="p">()</span>
</span><span class='line'>    <span class="k">compiler</span> cabal<span class="p">-</span><span class="k">new</span><span class="p">-</span>build
</span><span class='line'><span class="k">elseif</span> haskell#StackYamlFileExists<span class="p">()</span>
</span><span class='line'>    <span class="k">compiler</span> stack<span class="p">-</span>build
</span><span class='line'><span class="k">elseif</span> haskell#CabalFileExists<span class="p">()</span>
</span><span class='line'>    <span class="k">compiler</span> cabal<span class="p">-</span>build
</span><span class='line'><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Console on Xen]]></title>
    <link href="http://elliottt.github.io/blog/2015/03/04/debug-console-on-xen/"/>
    <updated>2015-03-04T14:30:14-08:00</updated>
    <id>http://elliottt.github.io/blog/2015/03/04/debug-console-on-xen</id>
    <content type="html"><![CDATA[<p>When debugging <a href="http://halvm.org">HaLVM</a> domains, the <code>writeDebugConsole</code>
function from <code>Hypervisor.Debug</code> is invaluable.  However, in order to see the
messages printed, you must enable the emergency console in
<a href="http://xen.org">Xen</a>.  This isn&rsquo;t too difficult, but it&rsquo;s not terribly well
documented: there are many sources that describe parts of the process, but none
that describe the whole thing.</p>

<h2>Rebuilding Xen</h2>

<p>First, Xen must be rebuilt with the emergency console enabled.  This is a
relatively simple step, especially if you&rsquo;re building rpms.  When running
<code>make</code>, make sure to add the additional argument <code>verbose=y</code>, which enables the
emergency console.  If rebuilding an rpm, just modify the <code>make</code> invocation in
the <code>%build</code> section of the spec file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>make <span class="nv">verbose</span><span class="o">=</span>y
</span></code></pre></td></tr></table></div></figure>


<h2>Booting Xen</h2>

<p>Next, you will need to modify the command line passed to Xen on boot,
instructing it to output messages to the debug console.  When using grub2, on
Fedora, this is achieved by modifying the <code>/etc/default/grub</code> file, and
rebuilding the grub configuration.</p>

<p>First, append this line to <code>/etc/default/grub</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">GRUB_CMDLINE_XEN</span><span class="o">=</span><span class="s2">&quot;loglvl=all guest_loglvl=all sync_console console_to_ring&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sets the logging level of both Xen and any guest domains to all, forces
synchronous output to the console, and copies all guest console output to the
console ring buffer.</p>

<p>Next, run this command to regenerate your grub config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo grub2-mkconfig -o /boot/grub2/grub.cfg
</span></code></pre></td></tr></table></div></figure>


<p>Now, you should be able to just reboot, selecting Xen from the grub menu, and be
able to see the output of calls to <code>writeDebugConsole</code>.</p>

<h2>Wrapping Up</h2>

<p>You should now be able to rebuild and configure Xen to allow guest domains to
write to the emergency console.  In particular, you can use this new feature to
aid the debugging of HaLVM domains.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Private DHCP]]></title>
    <link href="http://elliottt.github.io/blog/2014/05/17/private-dhcp/"/>
    <updated>2014-05-17T23:53:18-07:00</updated>
    <id>http://elliottt.github.io/blog/2014/05/17/private-dhcp</id>
    <content type="html"><![CDATA[<p>Recently I was working on a project in which I was creating loads of tap
devices, with <a href="https://github.com/galoisinc/hans">HaNS</a> instances connected to
them.  Initially, I was abusing the Galois network, stealing away precious
addresses from our internal /24 allocation.  This wasn&rsquo;t the end of the world,
as I was reusing addresses I was given, but it got me thinking: shouldn&rsquo;t I
be able to just allocate my own addresses?</p>

<p>After a bit of googling, I decided to use
<a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">Dnsmasq</a> to manage DNS caching,
and DHCP.  My first step was then to configure the network.</p>

<h2>Network Configuration</h2>

<p><code>NetworkManager</code> injects a bit too much uncertainty into the network
configuration, so I opted to disable it, and configure the network manually.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo systemctl stop NetworkManager
</span><span class='line'>$ sudo systemctl disable NetworkManager</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll be configuring all devices using the config scripts stored in
<code>/etc/sysconfig/network-scripts</code>, which requires enabling the <code>network</code> service.
I&rsquo;m not going to enable it here, but instead just restart the machine later.  I
know that I should be able to just start it after my configuration is done, but
I was experiencing some odd crashes when following that workflow that
disappeared with a reboot.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo systemctl enable network</span></code></pre></td></tr></table></div></figure>


<p>Make sure that the ethernet device you&rsquo;re planning on using as your interface to
the rest of the world is configured to your liking.  I&rsquo;m doing DHCP with mine to
get configuration data from the outer network, so it looks like the following.
(To make work easier, I&rsquo;m putting everything in the trusted firewall zone &ndash;
this is a development VM, so I don&rsquo;t feel too bad.)</p>

<ul>
<li><code>/etc/sysconfig/network-scripts/ifcfg-p2p1</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEVICE="p2p1"
</span><span class='line'>ONBOOT=yes
</span><span class='line'>BOOTPROTO="dhcp"
</span><span class='line'>HWADDR="08:00:27:59:00:f8"
</span><span class='line'>TYPE=Ethernet
</span><span class='line'>NAME="p2p1"
</span><span class='line'>ZONE="trusted"</span></code></pre></td></tr></table></div></figure>


<p>Additionally, I&rsquo;ve created a bridge named <code>br0</code> and a dummy device to occupy it,
named <code>dummy0</code>:</p>

<ul>
<li><code>/etc/sysconfig/network-scripts/ifcfg-br0</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEVICE="br0"
</span><span class='line'>ONBOOT=yes
</span><span class='line'>BOOTPROTO=static
</span><span class='line'>TYPE=Bridge
</span><span class='line'>NAME="br0"
</span><span class='line'>ZONE="trusted"
</span><span class='line'>IPADDR=10.37.0.1
</span><span class='line'>NETMASK=255.255.255.0</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>/etc/sysconfig/network-scripts/ifcfg-dummy0</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEVNAME=dummy0
</span><span class='line'>ONBOOT=yes
</span><span class='line'>BOOTPROTO=none
</span><span class='line'>TYPE=Ethernet
</span><span class='line'>NAME=dummy0
</span><span class='line'>ZONE=trusted
</span><span class='line'>BRIDGE=br0</span></code></pre></td></tr></table></div></figure>


<p>At this point, the layout of the network is all set.  Now, I just need to make
sure that the <code>dummy</code> kernel module will load at startup, and that I&rsquo;ll be able
to forward traffic between <code>br0</code> and <code>p2p1</code>.  Loading the module is fairly
straightforward, as I can just dump the following listing into
<code>/etc/sysconfig/modules/dummy.modules</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>modprobe -a dummy</span></code></pre></td></tr></table></div></figure>


<p>Next, let&rsquo;s make sure that packets will be forwarded between <code>p2p1</code> and <code>br0</code> by
setting the <code>net.ipv4.ip_forward</code> sysctl in /etc/sysctl.conf.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>net.ipv4.ip_forward = 1</span></code></pre></td></tr></table></div></figure>


<p>Finally, we&rsquo;re ready to reboot, and then begin setting up <code>Dnamasq</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo reboot</span></code></pre></td></tr></table></div></figure>


<h2>Dnsmasq</h2>

<p>First, let&rsquo;s install the server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo yum install dnsmasq</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s make minimal modifications to <code>/etc/dnsmasq.conf</code>, enabling the
<code>domain-needed</code> and <code>bogus-priv</code> options to make us better netizens.  The
effective full <code>dnsmasq.conf</code> file is included below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>domain-needed
</span><span class='line'>bogus-priv
</span><span class='line'>conf-dir=/etc/dnsmasq.d</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;ll configure the DHCP server in <code>/etc/dnsmasq.d/dhcp.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>listen-address=10.37.0.1
</span><span class='line'>dhcp-range=10.37.0.2,10.37.0.254,12h</span></code></pre></td></tr></table></div></figure>


<p>This gives us most of a /24 network to work with, and listens on the address we
gave to the bridge in <code>/etc/sysconfig/network-scripts/ifcfg-br0</code>.</p>

<p>At this point, dnsmasq can be started, and we can test that everything is
working by using the <code>tcp-test</code> program from
<a href="https://github.com/galoisinc/hans">HaNS</a>.</p>

<ul>
<li>Enable <code>Dnsmasq</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo systemctl enable dnsmasq
</span><span class='line'>$ sudo systemctl start dnsmasq</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a tap device for <code>tcp-test</code> to use, and add it to the brige that
<code>Dnsmasq</code> is listening on</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ owner=$USER
</span><span class='line'>$ sudo tunctl -p -u $owner -t tap6
</span><span class='line'>$ sudo brctl addif br0 tap0
</span><span class='line'>$ sudo ip link set tap0 up</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Start <code>tcp-test</code> (assuming that you&rsquo;ve already built it with <code>cabal build</code>,
and are in the base of the <a href="https://github.com/galoisinc/hans">HaNS</a> repo)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./dist/build/tcp-test/tcp-test dhcp
</span><span class='line'>Network stack running...
</span><span class='line'>Discovering address
</span><span class='line'>Bound to address: 10.37.0.89
</span><span class='line'>accepting
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>From a separate terminal you should be able to ping the address that <code>tcp-test</code>
outputted, <code>10.37.0.89</code> in this case`, and see fairly quick responses.</p>

<h2>External Access</h2>

<p>In order to have access to this new network node, from a host outside of the
machine that it&rsquo;s running on, you&rsquo;ll need to install a route to the
<code>10.37.0.0/24</code> network.  You&rsquo;ll need to know the address of your ethernet device
(<code>p2p1</code> here) to install this route.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ip addr show dev p2p1</span></code></pre></td></tr></table></div></figure>


<p>In my case, this was the address <code>10.0.1.5</code>.  Next, install the host-specific
route.  (Remember to replace <code>10.0.1.5</code> with the address you&rsquo;re using.)</p>

<ul>
<li>Mac OSX</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo route -n 10.37.0.0/24 10.0.1.5</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Linux</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo ip route add 10.37.0.0/24 via 10.0.1.5</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Hooray!  Now you can manage all of the devices that are added to the bridge
<code>br0</code> with a real DHCP server, making the propegation of configuration data a
breeze.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serenade in Haskell]]></title>
    <link href="http://elliottt.github.io/blog/2014/05/07/serenade-in-haskell/"/>
    <updated>2014-05-07T00:00:00-07:00</updated>
    <id>http://elliottt.github.io/blog/2014/05/07/serenade-in-haskell</id>
    <content type="html"><![CDATA[<p>One of the things that I think is great about Haskell is the way that you can
use the language to design new syntax.  After reading
<a href="http://elabs.se/blog/33-why-serenade">a quick introduction to Serenade.js</a>, one of the features that caught
my eye was their templating system.  It has a fairly elegant interface that
provides a concise language for generating HTML, though it seems like a
heavyweight solution, as it requires implementing a parser.</p>

<p>Upon closer inspection the examples provided seemed to be presenting a few key
combinators for constructing html.  After a bit of scaffolding, I&rsquo;ll demonstrate
my approach to replicating their examples in Haskell.  Just to be clear, this
isn&rsquo;t meant as a replacement, or a justification for templating in your source
language, but rather just an exploration of a Haskell embedding.</p>

<h2>Preliminaries</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="cm">{-# LANGUAGE OverloadedStrings #-}</span>
</span><span class='line'><span class="kr">module</span> <span class="nn">Serenade</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Text.PrettyPrint.HughesPJ</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>If you don&rsquo;t already know the pretty package on hackage, it&rsquo;s worth learning.
Many of the unpleasant tasks of generating strings can be boiled down to elegant
uses of the combinators it provides.</em></p>

<p>The type that the pretty package defines for pretty-printed documents is the
<code>Doc</code> type.  As I am going to be rendering out HTML as text in my <code>Serenade</code>
type, it&rsquo;s natural to make it a synonym of the <code>Doc</code> type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">type</span> <span class="kt">Serenade</span> <span class="ow">=</span> <span class="kt">Doc</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve simplified attributes to key/value pairs, which works well for my
small example.  Their pretty printing just involves printing the name as text,
followed by an &lsquo;=&rsquo; character, then the double quoted value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">type</span> <span class="kt">Attr</span> <span class="ow">=</span> <span class="p">(</span><span class="kt">String</span><span class="p">,</span><span class="kt">String</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">attr</span> <span class="ow">::</span> <span class="kt">Attr</span> <span class="ow">-&gt;</span> <span class="kt">Serenade</span>
</span><span class='line'><span class="nf">attr</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="ow">=</span> <span class="n">text</span> <span class="n">n</span> <span class="o">&lt;&gt;</span> <span class="n">char</span> <span class="sc">&#39;=&#39;</span> <span class="o">&lt;&gt;</span> <span class="n">doubleQuotes</span> <span class="p">(</span><span class="n">text</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">attrs</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Attr</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Serenade</span>
</span><span class='line'><span class="nf">attrs</span>  <span class="ow">=</span> <span class="n">hsep</span> <span class="o">.</span> <span class="n">map</span> <span class="n">attr</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tags are implemented as functions from their attributes and a child document, to
a new document.  The <code>tag</code> primitive is a function that takes a boolean value
that specifies if its content should be nested, or on the same line, and the
name of the tag as a <code>String</code>.  When the resulting <code>Tag</code> is used, it prints out
open/close pairs of tags with their attributes, optionally placing the child
content of the tag on a new line, and indenting it by two spaces when it is.</p>

<p>There is currently no notion of a empty tag, such as <code>&lt;br /&gt;</code>, though it would
be easy to generate that tag when the child argument was empty.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">type</span> <span class="kt">Tag</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">Attr</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Serenade</span> <span class="ow">-&gt;</span> <span class="kt">Serenade</span>
</span><span class='line'>
</span><span class='line'><span class="nf">tag</span> <span class="ow">::</span> <span class="kt">Bool</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Tag</span>
</span><span class='line'><span class="nf">tag</span> <span class="n">nl</span> <span class="n">name</span> <span class="n">as</span> <span class="n">child</span> <span class="ow">=</span>
</span><span class='line'>     <span class="n">char</span> <span class="sc">&#39;&lt;&#39;</span> <span class="o">&lt;&gt;</span> <span class="n">text</span> <span class="n">name</span> <span class="o">&lt;+&gt;</span> <span class="n">attrs</span> <span class="n">as</span> <span class="o">&lt;&gt;</span> <span class="n">char</span> <span class="sc">&#39;&gt;&#39;</span>
</span><span class='line'>  <span class="o">^^</span> <span class="n">nest</span> <span class="mi">2</span> <span class="n">child</span>
</span><span class='line'>  <span class="o">^^</span> <span class="n">text</span> <span class="s">&quot;&lt;/&quot;</span> <span class="o">&lt;&gt;</span> <span class="n">text</span> <span class="n">name</span> <span class="o">&lt;&gt;</span> <span class="n">char</span> <span class="sc">&#39;&gt;&#39;</span>
</span><span class='line'>  <span class="kr">where</span>
</span><span class='line'>  <span class="kr">infixr</span> <span class="mi">0</span> <span class="o">^^</span>
</span><span class='line'>  <span class="p">(</span><span class="o">^^</span><span class="p">)</span> <span class="o">|</span> <span class="n">nl</span>        <span class="ow">=</span> <span class="p">(</span><span class="o">$$</span><span class="p">)</span>
</span><span class='line'>       <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="p">(</span><span class="o">&lt;&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Combinators</h2>

<p>One of the things that struck me about the Serenade templates was their
simplicity: you don&rsquo;t write out the open/close tag pairs,
relying on layout to denote blocks.  Being a Haskell programmer, this just
seemed right.  Let&rsquo;s start by adding a few tag definitions so that the rest of
the examples have some motivation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ul</span><span class="p">,</span> <span class="n">li</span><span class="p">,</span> <span class="n">h1</span> <span class="ow">::</span> <span class="kt">Tag</span>
</span><span class='line'><span class="nf">ul</span> <span class="ow">=</span> <span class="n">tag</span> <span class="kt">True</span>  <span class="s">&quot;ul&quot;</span>
</span><span class='line'><span class="nf">li</span> <span class="ow">=</span> <span class="n">tag</span> <span class="kt">False</span> <span class="s">&quot;li&quot;</span>
</span><span class='line'><span class="nf">h1</span> <span class="ow">=</span> <span class="n">tag</span> <span class="kt">False</span> <span class="s">&quot;h1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Attributes</h3>

<p>The first example that caught my eye was the difference between using a tag with
a list of attributes, and using a tag with a specific attribute: <code>id</code>.  There
are two flavors of syntax in Serenade to support this functionality, the most
general form first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ul</span><span class="p">[</span><span class="n">id</span><span class="ow">=</span><span class="s">&quot;x&quot;</span><span class="p">]</span> <span class="o">...</span>
</span><span class='line'><span class="nf">ul</span><span class="o">#</span><span class="s">&quot;x&quot;</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the first example, you are just applying the <code>ul</code> tag to a list list of
attributes, whereas in the second example, you&rsquo;re using some special syntax to
set only the <code>id</code> attribute.  I&rsquo;ve chosen to implement this as a function that
takes something a little more general than the <code>Tag</code> type specified above, as
there&rsquo;s no reason to rule out other uses of this pattern.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="o">#</span><span class="p">)</span> <span class="ow">::</span> <span class="p">([</span><span class="kt">Attr</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">k</span> <span class="o">#</span> <span class="n">i</span> <span class="ow">=</span> <span class="n">k</span> <span class="p">[(</span><span class="s">&quot;id&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">attr_example1</span> <span class="ow">=</span> <span class="n">ul</span> <span class="p">[(</span><span class="s">&quot;id&quot;</span><span class="p">,</span> <span class="s">&quot;x&quot;</span><span class="p">)]</span>
</span><span class='line'><span class="nf">attr_example2</span> <span class="ow">=</span> <span class="n">ul</span> <span class="o">#</span> <span class="s">&quot;x&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you recall the definition of the <code>Tag</code> synonym, you can substitute
<code>Serenade -&gt; Serenade</code> for <code>a</code> in the type of <code>(#)</code>, and see that it can quite
easily be used as something of type <code>Tag -&gt; String -&gt; Serenade</code>.</p>

<h3>Variables</h3>

<p>In Serenade, variables are used by prefixing an identifier with a <code>@</code> character.
For example, if I have the <code>name</code> variable in scope, and would like to use it in
the body of an <code>li</code> tag, I can do this with the following snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">li</span> <span class="kt">Hello</span><span class="p">,</span> <span class="n">my</span> <span class="n">name</span> <span class="n">is</span> <span class="o">@</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>The way that I might approach this in Haskell is to view <code>@</code> as something that
joins a piece of text with the value of a variable.  Assuming that all
variables in Serenade contain strings, this can be viewed as a combinator that
takes some <code>Serenade</code> thing on the left, and a variable that contains a <code>String</code>
on the right:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="o">@@</span><span class="p">)</span> <span class="ow">::</span> <span class="kt">Serenade</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Serenade</span>
</span><span class='line'><span class="nf">l</span> <span class="o">@@</span> <span class="n">r</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&lt;&gt;</span> <span class="n">text</span> <span class="n">r</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus, the original example that uses the <code>li</code> tag can be turned into a function
that expects to have its <code>name</code> value provided.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">li_example</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Serenade</span>
</span><span class='line'><span class="nf">li_example</span> <span class="n">name</span> <span class="ow">=</span> <span class="n">li</span> <span class="kt">[]</span> <span class="p">(</span><span class="s">&quot;Hello, my name is &quot;</span> <span class="o">@@</span><span class="n">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Modulo the extra <code>@</code> symbol to avoid the built-in use of <code>@</code> in Haskell, this
conveys the intent of the original serenade template.</p>

<h3>Collections</h3>

<p>Serenade provides a way to, given a collection of key/value structures, map a
serenade template over each structure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ul</span><span class="o">#</span><span class="n">comments</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">collection</span> <span class="o">@</span><span class="n">comments</span>
</span><span class='line'>      <span class="n">li</span> <span class="o">@</span><span class="n">title</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a Haskell programmer, this seems like the <code>map</code> function, but with a little
bit of extra information about how to put together the results.  The <code>vcat</code>
function from the pretty library covers how we&rsquo;d like to join together the
documents generated from each element of the list, joining them together on
separate lines.  As a result, the Haskell implementation of the collection
function in Serenade should end up being just as powerful: anything that you
can make into a <code>Serenade</code> thing, you can lift over lists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">collection</span> <span class="ow">::</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Serenade</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Serenade</span>
</span><span class='line'><span class="nf">collection</span> <span class="n">as</span> <span class="n">k</span> <span class="ow">=</span> <span class="n">vcat</span> <span class="p">(</span><span class="n">map</span> <span class="n">k</span> <span class="n">as</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the example above can be encoded using the new <code>collection</code> combinator as
such, using the <code>text</code> function from the pretty library to turn the title string
into a Serenade document.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">col_example</span> <span class="n">comments</span> <span class="ow">=</span> <span class="n">ul</span> <span class="o">#</span> <span class="s">&quot;comments&quot;</span>
</span><span class='line'>                       <span class="o">$</span> <span class="n">collection</span> <span class="n">comments</span>
</span><span class='line'>                       <span class="o">$</span> <span class="nf">\</span><span class="n">title</span> <span class="ow">-&gt;</span> <span class="n">li</span> <span class="kt">[]</span> <span class="p">(</span><span class="n">text</span> <span class="n">title</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ignoring the lambda, and the introduction of the comments as an argument to the
example, this looks quite similar to the example in the Serenade templating
language.  Focusing on the lambda, the programmer now has control over the
naming of the fields in the collection; in Serenade, you would be coupled to the
field names defined by the code calling the template, whereas in the Haskell
version, the programmer gets to use normal conventions introduce names
that are convenient to them.</p>

<p>The neat thing about the <code>collection</code> combinator defined in Haskell is that it
only cares about the fact that you give it a list of things, and a way to turn
an individual thing into a <code>Serenade</code> thing.  If you wanted  to take a list of
lists that contained titles, and flatten them into a single list of titles, you
could modify <code>col_example</code> to look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">col_of</span> <span class="n">cols</span> <span class="ow">=</span> <span class="n">ul</span> <span class="o">#</span> <span class="s">&quot;cols&quot;</span>
</span><span class='line'>            <span class="o">$</span> <span class="n">collection</span> <span class="n">cols</span>               <span class="c1">-- outer collection</span>
</span><span class='line'>            <span class="o">$</span> <span class="nf">\</span> <span class="n">col</span> <span class="ow">-&gt;</span> <span class="n">collection</span> <span class="n">col</span>       <span class="c1">-- inner collection</span>
</span><span class='line'>            <span class="o">$</span> <span class="nf">\</span> <span class="n">title</span> <span class="ow">-&gt;</span> <span class="n">li</span> <span class="kt">[]</span> <span class="p">(</span><span class="n">text</span> <span class="n">title</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now each item of the outer collection is passed again to another use of the
<code>collection</code> combinator, emitting one <code>li</code> tag for each inner title.  When given
the list <code>[ ["a"], ["b", "c"] ]</code>, the <code>col_of</code> function will produce the HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;cols&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>a<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>b<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>c<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>It&rsquo;s amazing what you can do with just functions in Haskell. Careful attention
by the language designers to things like name scope mean that you no longer need
to rely on the names that someone else has chosen, you can choose your own
names and expect them to remain stable.  Templates written in the Haskell
Serenade approximation outlined above also benefit from Haskell&rsquo;s type system,
in that we&rsquo;re not bound to viewing everything as a hash of values: we can write
functions that traverse structures in a more meaningful way, without falling
back on hash tables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Mapping Context]]></title>
    <link href="http://elliottt.github.io/blog/2013/02/22/vim-mapping-context/"/>
    <updated>2013-02-22T10:49:00-08:00</updated>
    <id>http://elliottt.github.io/blog/2013/02/22/vim-mapping-context</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re like me, you&rsquo;ve got a lot of filetype-specific macros defined in your
vim config.  I tend to put these in <code>$VIM/after/syntax</code> so that I can keep it
all self-contained, but up until recently, macros had been bleeding into
different filetype contexts.  The problem was that I had been installing all
macros into the global scope, instead of the buffer scope, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>LocalLeader<span class="p">&gt;</span><span class="k">l</span> ...
</span></code></pre></td></tr></table></div></figure>


<p>Luckily, vim has a provision for this, and adding <code>&lt;buffer&gt;</code> right after the use
of <code>nmap</code> fixes the problem, and keeps the mapping buffer-local:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>buffer<span class="p">&gt;</span> <span class="p">&lt;</span>LocalLeader<span class="p">&gt;</span><span class="k">l</span> ...
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Register Trick]]></title>
    <link href="http://elliottt.github.io/blog/2013/02/19/vim-register-trick/"/>
    <updated>2013-02-19T11:06:00-08:00</updated>
    <id>http://elliottt.github.io/blog/2013/02/19/vim-register-trick</id>
    <content type="html"><![CDATA[<p>Well, it&rsquo;s new to me.</p>

<p>When you type <code>C-r</code> in edit mode, you get the opportunity to recall the contents
of a register.  While I had known about this, I never thought to apply it when
doing search and replace.  For example, if you search for something using <code>*</code>,
then want to replace what you&rsquo;ve found with something else, you can type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>%<span class="k">s</span><span class="sr">/C-r//replacement/</span><span class="k">g</span>
</span></code></pre></td></tr></table></div></figure>


<p>The contents of your last search will magically show up when you type the <code>/</code>
character, and your days of trying to remember the pattern for the last thing
you searched for are over!</p>
]]></content>
  </entry>
  
</feed>
