<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: networking | Stuff and Things]]></title>
  <link href="http://elliottt.github.io/blog/categories/networking/atom.xml" rel="self"/>
  <link href="http://elliottt.github.io/"/>
  <updated>2014-05-18T01:09:34-07:00</updated>
  <id>http://elliottt.github.io/</id>
  <author>
    <name><![CDATA[Trevor Elliott]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Private DHCP]]></title>
    <link href="http://elliottt.github.io/blog/2014/05/17/private-dhcp/"/>
    <updated>2014-05-17T23:53:18-07:00</updated>
    <id>http://elliottt.github.io/blog/2014/05/17/private-dhcp</id>
    <content type="html"><![CDATA[<p>Recently I was working on a project in which I was creating loads of tap
devices, with <a href="https://github.com/galoisinc/hans">HaNS</a> instances connected to
them.  Initially, I was abusing the Galois network, stealing away precious
addresses from our internal /24 allocation.  This wasn&rsquo;t the end of the world,
as I was reusing addresses I was given, but it got me thinking: shouldn&rsquo;t I
be able to just allocate my own addresses?</p>

<p>After a bit of googling, I decided to use
<a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">Dnsmasq</a> to manage DNS caching,
and DHCP.  My first step was then to configure the network.</p>

<h2>Network Configuration</h2>

<p><code>NetworkManager</code> injects a bit too much uncertainty into the network
configuration, so I opted to disable it, and configure the network manually.</p>

<p><code>
$ sudo systemctl stop NetworkManager
$ sudo systemctl disable NetworkManager
</code></p>

<p>I&rsquo;ll be configuring all devices using the config scripts stored in
<code>/etc/sysconfig/network-scripts</code>, which requires enabling the <code>network</code> service.
I&rsquo;m not going to enable it here, but instead just restart the machine later.  I
know that I should be able to just start it after my configuration is done, but
I was experiencing some odd crashes when following that workflow that
disappeared with a reboot.</p>

<p><code>
$ sudo systemctl enable network
</code></p>

<p>Make sure that the ethernet device you&rsquo;re planning on using as your interface to
the rest of the world is configured to your liking.  I&rsquo;m doing DHCP with mine to
get configuration data from the outer network, so it looks like the following.
(To make work easier, I&rsquo;m putting everything in the trusted firewall zone &mdash;
this is a development VM, so I don&rsquo;t feel too bad.)</p>

<ul>
<li><code>/etc/sysconfig/network-scripts/ifcfg-p2p1</code></li>
</ul>


<p><code>
DEVICE="p2p1"
ONBOOT=yes
BOOTPROTO="dhcp"
HWADDR="08:00:27:59:00:f8"
TYPE=Ethernet
NAME="p2p1"
ZONE="trusted"
</code></p>

<p>Additionally, I&rsquo;ve created a bridge named <code>br0</code> and a dummy device to occupy it,
named <code>dummy0</code>:</p>

<ul>
<li><p><code>/etc/sysconfig/network-scripts/ifcfg-br0</code>
<code>
DEVICE="br0"
ONBOOT=yes
BOOTPROTO=static
TYPE=Bridge
NAME="br0"
ZONE="trusted"
IPADDR=10.37.0.1
NETMASK=255.255.255.0
</code></p></li>
<li><p><code>/etc/sysconfig/network-scripts/ifcfg-dummy0</code>
<code>
DEVNAME=dummy0
ONBOOT=yes
BOOTPROTO=none
TYPE=Ethernet
NAME=dummy0
ZONE=trusted
BRIDGE=br0
</code></p></li>
</ul>


<p>At this point, the layout of the network is all set.  Now, I just need to make
sure that the <code>dummy</code> kernel module will load at startup, and that I&rsquo;ll be able
to forward traffic between <code>br0</code> and <code>p2p1</code>.  Loading the module is fairly
straightforward, as I can just dump the following listing into
<code>/etc/sysconfig/modules/dummy.modules</code></p>

<p>```</p>

<h1>!/bin/sh</h1>

<p>modprobe -a dummy
```</p>

<p>Next, let&rsquo;s make sure that packets will be forwarded between <code>p2p1</code> and <code>br0</code> by
setting the <code>net.ipv4.ip_forward</code> sysctl in /etc/sysctl.conf.</p>

<p><code>
net.ipv4.ip_forward = 1
</code></p>

<p>Finally, we&rsquo;re ready to reboot, and then begin setting up <code>Dnamasq</code>.</p>

<p><code>
$ sudo reboot
</code></p>

<h2>Dnsmasq</h2>

<p>First, let&rsquo;s install the server.</p>

<p><code>
$ sudo yum install dnsmasq
</code></p>

<p>Now, let&rsquo;s make minimal modifications to <code>/etc/dnsmasq.conf</code>, enabling the
<code>domain-needed</code> and <code>bogus-priv</code> options to make us better netizens.  The
effective full <code>dnsmasq.conf</code> file is included below.</p>

<p><code>
domain-needed
bogus-priv
conf-dir=/etc/dnsmasq.d
</code></p>

<p>Now we&rsquo;ll configure the DHCP server in <code>/etc/dnsmasq.d/dhcp.conf</code>:</p>

<p><code>
listen-address=10.37.0.1
dhcp-range=10.37.0.2,10.37.0.254,12h
</code></p>

<p>This gives us most of a /24 network to work with, and listens on the address we
gave to the bridge in <code>/etc/sysconfig/network-scripts/ifcfg-br0</code>.</p>

<p>At this point, dnsmasq can be started, and we can test that everything is
working by using the <code>tcp-test</code> program from
<a href="https://github.com/galoisinc/hans">HaNS</a>.</p>

<ul>
<li><p>Enable <code>Dnsmasq</code>
<code>
$ sudo systemctl enable dnsmasq
$ sudo systemctl start dnsmasq
</code></p></li>
<li><p>Create a tap device for <code>tcp-test</code> to use, and add it to the brige that
<code>Dnsmasq</code> is listening on
<code>
$ owner=$USER
$ sudo tunctl -p -u $owner -t tap6
$ sudo brctl addif br0 tap0
$ sudo ip link set tap0 up
</code></p></li>
<li><p>Start <code>tcp-test</code> (assuming that you&rsquo;ve already built it with <code>cabal build</code>,
and are in the base of the <a href="https://github.com/galoisinc/hans">HaNS</a> repo)
<code>
$ ./dist/build/tcp-test/tcp-test dhcp
Network stack running...
Discovering address
Bound to address: 10.37.0.89
accepting
...
</code></p></li>
</ul>


<p>From a separate terminal you should be able to ping the address that <code>tcp-test</code>
outputted, <code>10.37.0.89</code> in this case`, and see fairly quick responses.</p>

<h2>External Access</h2>

<p>In order to have access to this new network node, from a host outside of the
machine that it&rsquo;s running on, you&rsquo;ll need to install a route to the
<code>10.37.0.0/24</code> network.  You&rsquo;ll need to know the address of your ethernet device
(<code>p2p1</code> here) to install this route.</p>

<p><code>
$ ip addr show dev p2p1
</code>
In my case, this was the address <code>10.0.1.5</code>.  Next, install the host-specific
route.  (Remember to replace <code>10.0.1.5</code> with the address you&rsquo;re using.)</p>

<ul>
<li><p>Mac OSX
<code>
$ sudo route -n 10.37.0.0/24 10.0.1.5
</code></p></li>
<li><p>Linux
<code>
$ sudo route add 10.37.0.0/24 via 10.0.1.5
</code></p></li>
</ul>


<h2>Conclusion</h2>

<p>Hooray!  Now you can manage all of the devices that are added to the bridge
<code>br0</code> with a real DHCP server, making the propegation of configuration data a
breeze.</p>
]]></content>
  </entry>
  
</feed>
